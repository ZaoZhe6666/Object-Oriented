Readme

关于文件属性

除了Map.java为GBK外，其余全部为UTF-8



关于地图初始化：

道路地图存放在目录下的in.txt文件中
红绿灯地图存放在目录下的light.txt文件中

地图读入初始化时，会在控制台输出地图（如果不想输出可以在main类中注释掉53行print一句）
同时控制台输出
The drivers are all here now!
The people can call the taxi now!







关于出租车：

由于请求输入的时间以系统时间为准，因此可能出现请求分配给出租车时，出租车运行在200ms之间，也就是两格之间。如果遇到在两格之间的出租车，则出租车仍然继续运动，在到达目的地十字路口后，立刻响应乘客请求，向乘客运行，下一个200ms时刻，则该出租车已经运行到向乘客靠近的邻接点。

由于出租车的流量是200ms一刷新，阅读下发的GUI文件可知，采用的是200ms一断，将刚刚过去的200ms时间内产生的地图，用于给未来200ms作为流量判断使用。因此出租车在单行道行驶时，不会回头(因为出租车前进之后，身后的流量为1，若没有其他车影响，则单行道必然将向前行驶)

只要停车(除了临时停靠接客人上车)，出租车的运动就不算拖曳运动(即不算做在运动中继续运动，而视为从静止变为运动)，出租车若恰好位于红绿灯之下，也不受其影响








关于控制台指令：


控制台的输入规定一行一个输入，在接收到“The people can call the taxi now!”的提示时，可以输入请求。

打车请求按照[CR,(X,X),(Y,Y)]的格式，允许有空格，请求坐标由（1，1）至（80，80）共6400个坐标，注：坐标设置为1-80，没有0。

查看特定出租车输入[FR,Taxi,X],会返回出租车X的一些信息，返回在文件Detail.txt中。X为出租车编号，为1-100。信息将返回在文件Detail.txt中。

查看当前某一状态的出租车信息输入[FR,Status,X]。会返回当前该状态的出租车信息。状态编号：0停止运行 1服务 2等待服务 3接单状态，该信息同样返回在文件Detail.txt中。

可以增加或删减已有路径，同时也支持增加或删减初始时不存在路径。
输入[DR,WORD,(X,Y),Z]可完成该操作。
其中WORD部分可为Open或Close。
X，Y均为[1,80]间的正整数，。
Z为0或1,为0表示点(X,Y)所相连的右侧的横线，为1表示点(X,Y)所相连的下方的点。

输入的编号超过范围则提示输入错误。




关于新增的指示灯的细节：

若指示灯地图不合法，则会弹出相应提示信息，如果某点不存在3条及3条以上的通路，则报错
"Do not need a traffic light in (X,Y) !",其中X，Y为[1,80]间用于表示地图上点的位置的正整数
同时不会在该点添加红绿灯

当进行删边操作，使得某指示灯所在点，不存在3条及3条以上通路，则删除该指示灯，并不再增加

所有的红绿灯用同一个随机值X进行红绿变换，X为实例化灯光类时随机产生的[50,100]间的正整数

等红绿灯的时间不算在司机感觉无聊想停车的20s运动里




关于最终输出：

打车请求会被输出在Request_i.txt中，其中i表示该请求为第几个请求。

查询请求会被输出在Detail.txt中

测试者在测试前需要确保目录下没有形如Request_i.txt与Detail.txt名字的文件

输出状态时，用状态编号来表示状态。//0停止运行 1服务 2等待服务 3接单状态，如：state：2表示出租车当前状态是等待服务

Request_i.txt文件内具体的顺序：

首先输出指令要求和发出时间。接着输出这一时刻周围4*4所有出租车信息
接着抢单的出租车，抢单成功的出租车。
输出抢单成功的出租车去接客人的路径，接到客人去目的地的路径。
全部结束后输出Request finished!


其他问题：

通路地图的连通性和合法性需要由测试者提供。如果给一个不连通的图，那么可能司机会选择去上厕所

红绿灯地图的红绿灯数量需超过30%等具体位置信息由测试者保证

允许一次修改超过5条道路，输入过多可能时间不相同。

增减地图的时候，如果把地图最右和最下提供了向外的通路，GUI会更新，但是出租车好像不会去



别的没什么了，辛苦你读到了这里。

和谐六系，笔芯(っ′Ι`)っ